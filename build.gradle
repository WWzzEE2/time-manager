/*
 * Copyright 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.google.android.material.composethemeadapter.Libs
import com.google.android.material.composethemeadapter.Versions

buildscript {
    repositories {
        google()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath Libs.androidGradlePlugin
        classpath Libs.Kotlin.gradlePlugin

        classpath Libs.gradleMavenPublishPlugin
        
        classpath Libs.Dokka.gradlePlugin
        classpath Libs.Kotlin.binaryCompatibility
    }
}

plugins {
    id "com.diffplug.spotless" version "5.9.0"
}

apply plugin: 'org.jetbrains.dokka'

apply plugin: 'binary-compatibility-validator'
apiValidation {
    // Ignore the sample from API tracking/checking
    ignoredProjects += ["sample"]
}

tasks.withType(org.jetbrains.dokka.gradle.DokkaTask).configureEach {
    outputDirectory = rootProject.file('docs/api')
    failOnWarning = true
}

allprojects {
    repositories {
        google()
        mavenCentral()
        jcenter()

        if (!Libs.AndroidX.Compose.snapshot.isEmpty()) {
            maven { url Libs.AndroidX.Compose.snapshotUrl }
        }
    }
    // BUG: https://issuetracker.google.com/issues/240473335
    configurations.all {
        exclude group: 'androidx.lifecycle', module: 'lifecycle-viewmodel-ktx'
    }
}

subprojects {
    apply plugin: 'com.diffplug.spotless'
    spotless {
        kotlin {
            target "**/*.kt"
            ktlint(Versions.ktlint)
            licenseHeaderFile rootProject.file('spotless/copyright.txt')
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            // Treat all Kotlin warnings as errors
            //allWarningsAsErrors = true

            // Set JVM target to 1.8
            jvmTarget = "1.8"

            // Allow use of @OptIn
            freeCompilerArgs += '-opt-in=kotlin.RequiresOptIn'
        }
    }

    // Must be afterEvaluate or else com.vanniktech.maven.publish will overwrite our
    // dokka configuration.
    afterEvaluate {
        if (tasks.findByName('dokkaGfm') == null) {
            // If dokka isn't enabled on this module, skip
            return
        }
        tasks.withType(org.jetbrains.dokka.gradle.DokkaTask) {
            dokkaSourceSets.named("main") {
                configuration {
                    jdkVersion.set(8)
                    reportUndocumented.set(true)
                    skipEmptyPackages.set(true)
                    skipDeprecated.set(true)

                    // Add Android SDK packages
                    noAndroidSdkLink.set(false)

                    // Add samples from :sample module
                    samples.from(rootProject.file("sample/src/main/java/"))

                    // AndroidX + Compose docs
                    externalDocumentationLink {
                        url.set(new URL("https://developer.android.com/reference/"))
                        packageListUrl.set(new URL("https://developer.android.com/reference/androidx/package-list"))
                    }
                    externalDocumentationLink {
                        url.set(new URL("https://developer.android.com/reference/kotlin/"))
                        packageListUrl.set(new URL("https://developer.android.com/reference/kotlin/androidx/package-list"))
                    }

                    sourceLink {
                        localDirectory.set(project.file("src/main/java"))
                        // URL showing where the source code can be accessed through the web browser
                        remoteUrl.set(new URL("https://github.com/material-components/material-components-android-compose-theme-adapter/blob/develop/${project.name}/src/main/java"))
                        // Suffix which is used to append the line number to the URL. Use #L for GitHub
                        remoteLineSuffix.set("#L")
                    }
                }
            }
        }
    }
}
